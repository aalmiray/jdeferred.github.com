{"name":"JDeferred","tagline":"Java Deferred / Promise library","body":"<!--\r\n  Copyright 2013 Ray Tsang\r\n  \r\n  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  you may not use this file except in compliance with the License.\r\n  You may obtain a copy of the License at\r\n  \r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n  \r\n  Unless required by applicable law or agreed to in writing, software\r\n  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  See the License for the specific language governing permissions and\r\n  limitations under the License.\r\n-->\r\n\r\nJDeferred\r\n=========\r\n\r\nJDeferred is a Java Deferred/Promise library similar to JQuery.Deferred.\r\n\r\nInspired by [JQuery](https://github.com/jquery/jquery) and [Android Deferred Object](https://github.com/CodeAndMagic/android-deferred-object).\r\n\r\nFeatures\r\n--------\r\n* Deferred object and Promise\r\n* Promise callbacks\r\n  * ```.then(…)```\r\n  * ```.done(…)```\r\n  * ```.fail(…)```\r\n  * ```.progress(…)```\r\n  * ```.always(…)```\r\n* Multiple promises\r\n  * ```.when(p1, p2, p3, …).then(…)```\r\n* Callable and Runnable wrappers\r\n  * ```.when(new Runnable() {…})```\r\n* Uses Executor Service\r\n* Java Generics support\r\n  * ```Deferred<Integer, Exception, Double> deferred;```\r\n  * ```deferred.resolve(10);```\r\n  * ```deferred.reject(new Exception());```\r\n  * ```deferred.progress(0.80);```  \r\n* Yes, it's on Maven central repo!\r\n\r\nMaven\r\n-----\r\n```xml\r\n<dependency>\r\n    <groupId>org.jdeferred</groupId>\r\n    <artifactId>jdeferred-core</artifactId>\r\n    <version>1.0.0</version>\r\n</dependency>\r\n```\r\n\r\n\r\nQuick Examples\r\n==============\r\n\r\nDeferred object and Promise\r\n---------------------------\r\n\r\n```java\r\nDeferred deferred = new DeferredObject();\r\nPromise promise = deferred.promise();\r\npromise.done(new DoneCallback() {\r\n  public void onDone(Object result) {\r\n    ...\r\n  }\r\n}).fail(new FailCallback() {\r\n  public void onFail(Object rejection) {\r\n    ...\r\n  }\r\n}).progress(new ProgressCallback() {\r\n  public void onProgress(Object progress) {\r\n    ...\r\n  }\r\n}).always(new AlwaysCallback() {\r\n  public void onAlways(State state, Object result, Object rejection) {\r\n    ...\r\n  }\r\n});\r\n```\r\nWith the reference to deferred object, you can then trigger actions/updates:\r\n\r\n```java\r\ndeferred.resolve(\"done\");\r\ndeferred.reject(\"oops\");\r\ndeferred.progress(\"100%\");\r\n```\r\n\r\nFilter/Pipe\r\n-----------\r\n```java\r\nDeferred d = …;\r\nPromise p = d.promise();\r\nPromise filtered = p.then(new DoneFilter<Integer, Integer>(){\r\n  public Integer filterDone(Integer result) P\r\n    return result * 10;\r\n  }\r\n});\r\n\r\nfiltered.done(new DoneCallback<Integer>{\r\n  public void onDone(Integer result) {\r\n    // result would be original * 10\r\n    System.out.println(result);\r\n  }\r\n});\r\n\r\nd.resolve(3) -> 30.\r\n\r\n```\r\n\r\nDeferred Manager\r\n----------------\r\n```java\r\nDeferredManager dm = new DefaultDeferredManager();\r\nPromise p1, p2, p3;\r\n// initialize p1, p2, p3\r\ndm.when(p1, p2, p3)\r\n  .done(…)\r\n  .fail(…)\r\n```\r\nYou can also specify a Executor Service for your need.\r\n\r\n```\r\nDeferredManager dm = new DefaultDeferredManager(myExecutorService);\r\n```\r\n\r\nRunnable and Callable\r\n---------------------\r\nYou can use Callable and Runnable almost like a Promise without any additional work.\r\n\r\n```java\r\nDeferredManager dm = new DefaultDeferredManager();\r\ndm.when(new Callable<Integer>(){\r\n  public Integer call() {\r\n    // return something\r\n    // or throw a new exception\r\n  }\r\n}).done(new DoneCallback<Integer>() {\r\n  public void onDone(Integer result) {\r\n    ...\r\n  }\r\n}).fail(new FailCallback<Throwable>() {\r\n  public void onFail(Throwable e) {\r\n    ...\r\n  }\r\n});\r\n```\r\n\r\nIf you need to notify progress within your Callable or Runnable, you either need to create your own Deferred object and Promise, or you can use DeferredCallable and DeferredRunnable.\r\n\r\nUse your own Deferred object\r\n\r\n```java\r\nfinal Deferred deferred = ...\r\nPromise promise = deferred.promise();\r\npromise.then(…);\r\nRunnable r = new Runnable() {\r\n  public void run() {\r\n    while (…) {\r\n      deferred.notify(myProgress);\r\n    }\r\n    deferred.resolve(\"done\");\r\n  }\r\n}\r\n```\r\n\r\nOr, extending DeferredRunnable\r\n\r\n```java\r\nDeferredManager dm = …;\r\ndm.when(new DeferredRunnable<Double>(){\r\n  public void run() {\r\n    while (…) {\r\n      notify(myProgress);\r\n    }\r\n  }\r\n}).then(…);\r\n```","google":"UA-7701209-6","note":"Don't delete this file! It's used internally to help with page regeneration."}